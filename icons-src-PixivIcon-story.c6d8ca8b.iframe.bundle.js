"use strict";(self.webpackChunkcharcoal_ui=self.webpackChunkcharcoal_ui||[]).push([[8608],{"./packages/icons/src/PixivIcon.story.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,WithAttributes:()=>WithAttributes,WithUnsafe:()=>WithUnsafe,default:()=>PixivIcon_story});var jsx_runtime=__webpack_require__("./node_modules/.pnpm/react@18.3.1/node_modules/react/jsx-runtime.js"),styled_components_browser_esm=__webpack_require__("./node_modules/.pnpm/styled-components@5.3.11_@babel+core@7.26.10_react-dom@18.3.1_react@18.3.1__react-is@18.3.1_react@18.3.1/node_modules/styled-components/dist/styled-components.browser.esm.js");const TestIconThatNeverExists_namespaceObject=__webpack_require__.p+"static/media/TestIconThatNeverExists.9a1974a9.svg";var warning=__webpack_require__("./node_modules/.pnpm/warning@4.0.3/node_modules/warning/warning.js"),warning_default=__webpack_require__.n(warning),src=__webpack_require__("./packages/icon-files/src/index.js");const charcoalIconFiles=src.A,KNOWN_ICON_FILES=Object.keys(src.A);class PixivIconLoadError extends Error{constructor(name,cause){const message=function formatMessage(name,cause){const message=`Failed to fetch <pixiv-icon name="${name}">`;if(null==cause)return message;if(cause instanceof Error)return`${message}: ${cause.toString()})`;return`${message}: ${JSON.stringify(cause)})`}(name,cause);super(message,{cause}),this.name="PixivIconLoadError",Object.setPrototypeOf(this,new.target.prototype)}}class CharcoalIconFilesLoader{_name;_resultSvg=void 0;_promise=void 0;constructor(name){this._name=name}get importIconFile(){return charcoalIconFiles[this._name]}async fetch(){return void 0!==this._resultSvg?this._resultSvg:(this._promise||(this._promise=this.importIconFile().then((svg=>(this._resultSvg=svg,this._resultSvg))).catch((e=>{throw new PixivIconLoadError(this._name,e)})).finally((()=>{this._promise=void 0}))),this._promise)}}class CustomIconLoader{_name;_filePathOrUrl;_resultSvg=void 0;_promise=void 0;constructor(name,filePathOrUrl){this._name=name,this._filePathOrUrl=filePathOrUrl}async fetch(){return void 0!==this._resultSvg?this._resultSvg:(this._promise||(this._promise=fetch(this._filePathOrUrl).then((response=>{if(!response.ok)throw new PixivIconLoadError(this._name,"Response is not ok");return response.text()})).then((svg=>(this._resultSvg=svg,this._resultSvg))).catch((e=>{if(e instanceof PixivIconLoadError)throw e;throw new PixivIconLoadError(this._name,e)})).finally((()=>{this._promise=void 0}))),this._promise)}}const loaders=new Map;async function getIcon(name){const loader=function resolveIconLoader(name){const registeredLoader=loaders.get(name);if(registeredLoader)return registeredLoader;if(function isKnownIconFile(name){return name in src.A}(name)){const charcoalIconFilesLoader=new CharcoalIconFilesLoader(name);return loaders.set(name,charcoalIconFilesLoader),charcoalIconFilesLoader}return null}(name);if(null==loader)throw new PixivIconLoadError(name,"Loader was not found");return loader.fetch().catch((e=>{if(e instanceof PixivIconLoadError)throw e;throw new PixivIconLoadError(name,e)}))}const __SERVER__="undefined"==typeof window,CAN_USE_DOM="undefined"!=typeof HTMLElement;!__SERVER__&&CAN_USE_DOM||(globalThis.HTMLElement=class{});const attributes=["name","scale","unsafe-non-guideline-scale"];class PixivIcon extends HTMLElement{static tagName="pixiv-icon";static extend(map){warning_default()(!__SERVER__,"Using `PixivIcon.extend()` on server has no effect"),__SERVER__||Object.entries(map).forEach((([name,filePathOrUrl])=>{if(!name.includes("/"))throw new TypeError(`${name} is not a valid icon name. "name" must be named like [size]/[Name].`);!function addCustomIcon(name,filePathOrUrl){loaders.set(name,new CustomIconLoader(name,filePathOrUrl))}(name,filePathOrUrl)}))}static get observedAttributes(){return attributes}svgContent;observer;isVisible=!1;get props(){const partial=Object.fromEntries(attributes.map((attribute=>[attribute,this.getAttribute(attribute)]))),name=partial.name;if(null===name)throw new TypeError('property "name" is required.');if(!name.includes("/"))throw new TypeError(`${name} is not a valid icon name. "name" must be named like [size]/[Name].`);return{...partial,name}}get forceResizedSize(){if(null===this.props["unsafe-non-guideline-scale"])return null;const[size]=this.props.name.split("/"),scale=Number(this.props["unsafe-non-guideline-scale"]);return"Inline"===size?16*scale:Number(size)*scale}get scaledSize(){const[size]=this.props.name.split("/"),scale=Number(this.props.scale??"1");switch(size){case"Inline":return 2===scale?32:16;case"24":return Number(size)*scale;default:return Number(size)}}constructor(){super(),this.attachShadow({mode:"open"})}async connectedCallback(){this.render(),await this.waitUntilVisible(),this.isVisible=!0,await this.loadSvg(this.props.name)}disconnectedCallback(){this.observer?.disconnect(),this.observer=void 0,this.isVisible=!1}attributeChangedCallback(attr,_oldValue,newValue){this.isVisible&&("name"!==attr?void 0===this.svgContent?this.loadSvg(this.props.name):this.render():this.loadSvg(newValue))}render(){const size=this.forceResizedSize??this.scaledSize;if(!Number.isFinite(size))throw new TypeError("icon size must not be NaN");const style=`<style>\n  :host {\n    display: inline-flex;\n    --size: ${size}px;\n  }\n\n  svg {\n    width: var(--size);\n    height: var(--size);\n  }\n</style>`,svg=void 0!==this.svgContent?this.svgContent:`<svg viewBox="0 0 ${size} ${size}"></svg>`;this.shadowRoot.innerHTML=style+svg}async loadSvg(name){this.svgContent=await getIcon(name),this.render()}waitUntilVisible(){return new Promise((resolve=>{this.observer=new IntersectionObserver((entries=>{entries.some((entry=>entry.isIntersecting))&&(this.observer?.disconnect(),this.observer=void 0,resolve())}),{rootMargin:"50px"}),this.observer.observe(this)}))}}PixivIcon.__docgenInfo={description:"",methods:[{name:"extend",docblock:"NOTE: icon content should be sanitized before pass to extend()",modifiers:["static"],params:[{name:"map",optional:!1,type:{name:"unknown"}}],returns:null,description:"NOTE: icon content should be sanitized before pass to extend()"},{name:"observedAttributes",docblock:null,modifiers:["static","get"],params:[],returns:null},{name:"props",docblock:null,modifiers:["get"],params:[],returns:null},{name:"forceResizedSize",docblock:null,modifiers:["get"],params:[],returns:null},{name:"scaledSize",docblock:null,modifiers:["get"],params:[],returns:null},{name:"connectedCallback",docblock:null,modifiers:["async"],params:[],returns:null},{name:"disconnectedCallback",docblock:null,modifiers:[],params:[],returns:null},{name:"attributeChangedCallback",docblock:null,modifiers:[],params:[{name:"attr",optional:!1,type:{name:"string"}},{name:"_oldValue",optional:!1,type:{name:"union",raw:"string | null",elements:[{name:"string"},{name:"null"}]}},{name:"newValue",optional:!1,type:{name:"string"}}],returns:null}],displayName:"PixivIcon"},__SERVER__||window.customElements.get(PixivIcon.tagName)||(window.PixivIcon=PixivIcon,window.customElements.define(PixivIcon.tagName,PixivIcon)),PixivIcon.extend({"16/TestIconThatNeverExists":TestIconThatNeverExists_namespaceObject});const PixivIcon_story={title:"Icons/PixivIcon (<pixiv-icon>)",argTypes:{color:{control:{type:"color"}},name:{control:{type:"select",options:[...KNOWN_ICON_FILES,"16/TestIconThatNeverExists"]}},scale:{control:{type:"select",options:[1,2,3]}}},parameters:{storyshots:{disable:!0}},render:({scale,color})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[Object.entries(groupedIcons).map((([groupName,icons])=>(0,jsx_runtime.jsxs)(Group,{children:[(0,jsx_runtime.jsxs)(Heading,{children:[groupName," (scale: ",scale,")"]}),(0,jsx_runtime.jsx)(Grid,{children:icons.map((name=>(0,jsx_runtime.jsxs)(IconDef,{color,children:[(0,jsx_runtime.jsx)("pixiv-icon",{name,scale},scale),(0,jsx_runtime.jsx)("div",{children:name})]},name)))})]},groupName))),(0,jsx_runtime.jsx)(Global,{})]})},groupedIcons=KNOWN_ICON_FILES.reduce(((map,icon)=>{const[prefix]=icon.split("/");return prefix in map?map[prefix].push(icon):map[prefix]=[icon],map}),{}),Global=styled_components_browser_esm.DU`
  :root {
    font-family: Helvetica, Arial, sans-serif;
    color: rgba(#000, 0.88);
  }

  .icon-class {
    transform: rotate(45deg);
  }
`,Grid=styled_components_browser_esm.Ay.div`
  display: grid;
  gap: 8px;
  grid-template-columns: 1fr 1fr 1fr;
`,Group=styled_components_browser_esm.Ay.div`
  & + & {
    margin-top: 64px;
  }
`,IconDef=styled_components_browser_esm.Ay.div`
  color: ${({color})=>color??"#000000"};
  display: inline-flex;
  align-items: center;
  min-height: 32px;

  pixiv-icon {
    display: block;
    flex-shrink: 0;

    & + div {
      flex: 1 0;
      margin-left: 8px;
      font-size: 14px;
      line-height: 22px;
    }
  }
`,Heading=styled_components_browser_esm.Ay.h2`
  font-size: 20px;
  line-height: 28px;
  font-weight: bold;
  margin: 16px 0;
`,Default={args:{scale:1,color:"#000000"}},WithAttributes={render:({color,name,scale})=>(0,jsx_runtime.jsxs)("div",{children:[(0,jsx_runtime.jsxs)(IconDef,{color,children:[(0,jsx_runtime.jsx)("pixiv-icon",{class:"icon-class",name,scale}),(0,jsx_runtime.jsx)("div",{children:"アイコンと文字"})]}),(0,jsx_runtime.jsx)(Global,{})]}),args:{name:"16/Add",scale:1,color:"#000000"}},WithUnsafe={render:({color,name,scale,...args})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)(IconDef,{color,children:[(0,jsx_runtime.jsx)("pixiv-icon",{"unsafe-non-guideline-scale":args["unsafe-non-guideline-scale"],name,scale}),"アイコンと文字"]}),(0,jsx_runtime.jsx)(Global,{})]}),args:{name:"16/Add","unsafe-non-guideline-scale":"3.75",color:"#000000"}};Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    scale: 1,\n    color: '#000000'\n  }\n}",...Default.parameters?.docs?.source}}},WithAttributes.parameters={...WithAttributes.parameters,docs:{...WithAttributes.parameters?.docs,source:{originalSource:"{\n  render: ({\n    color,\n    name,\n    scale\n  }) => <div>\n      <IconDef color={color}>\n        <pixiv-icon class=\"icon-class\" name={name} scale={scale} />\n        <div>アイコンと文字</div>\n      </IconDef>\n      <Global />\n    </div>,\n  args: {\n    name: '16/Add',\n    scale: 1,\n    color: '#000000'\n  }\n}",...WithAttributes.parameters?.docs?.source}}},WithUnsafe.parameters={...WithUnsafe.parameters,docs:{...WithUnsafe.parameters?.docs,source:{originalSource:"{\n  render: ({\n    color,\n    name,\n    scale,\n    ...args\n  }) => {\n    return <>\n        <IconDef color={color}>\n          <pixiv-icon unsafe-non-guideline-scale={args['unsafe-non-guideline-scale']} name={name} scale={scale} />\n          アイコンと文字\n        </IconDef>\n        <Global />\n      </>;\n  },\n  args: {\n    name: '16/Add',\n    'unsafe-non-guideline-scale': '3.75',\n    color: '#000000'\n  }\n}",...WithUnsafe.parameters?.docs?.source}}}}}]);
//# sourceMappingURL=icons-src-PixivIcon-story.c6d8ca8b.iframe.bundle.js.map