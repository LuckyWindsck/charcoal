{"version":3,"file":"main.f47a3a15.iframe.bundle.js","mappings":";AAKA;AAOA;;AACA;AAGA;;AACA;;;AAEA;;AAIA;AAEA;AAEA;;AACA;;;AAgBA;;ACtCA;;;;;;;;;;;;;;;;ACCA;;;;;;;;;;;ACLA;;;;;;ACAA","sources":["webpack://charcoal-ui/../src/TokenInjector.tsx","webpack://charcoal-ui/../src/utils/typographyCss.ts","webpack://charcoal-ui/../src/styles/focusVisibleFocusRingCss.ts","webpack://charcoal-ui/../src/styles/disabledCss.ts","webpack://charcoal-ui/../src/styles/assertiveRingCss.ts"],"sourcesContent":["import { createGlobalStyle, css } from 'styled-components'\nimport { CharcoalAbstractTheme } from '@charcoal-ui/theme'\nimport { defineThemeVariables, withPrefixes } from './util'\nimport { mapObject } from '@charcoal-ui/utils'\n\nconst GlobalStyle = createGlobalStyle<{\n  themeMap: ThemeMap<Theme>\n  background?: keyof ThemeMap<Theme>[string]['color']\n}>`\n  ${({ themeMap, background }) =>\n    Object.entries(themeMap).map(([key, theme]) =>\n      key.startsWith('@media')\n        ? css`\n            ${key} {\n              :root {\n                ${background !== undefined &&\n                css`\n                  background-color: ${theme.color[background]};\n                `}\n                ${defineColorVariableCSS(theme)}\n              }\n            }\n          `\n        : css`\n            /* stylelint-disable-next-line no-duplicate-selectors */\n            ${key} {\n              ${background !== undefined &&\n              css`\n                background-color: ${theme.color[background]};\n              `}\n              ${defineColorVariableCSS(theme)}\n            }\n          `\n    )}\n`\n\nexport interface ThemeMap<T extends Theme> {\n  ':root': T\n  [mediaQuery: `@media (${string})`]: T\n  [selector: string]: T\n}\n\ntype Theme = Pick<CharcoalAbstractTheme, 'color' | 'effect' | 'border'>\n\nexport default function TokenInjector<T extends Theme>({\n  theme: themeMap,\n  background,\n}: {\n  theme: ThemeMap<T>\n  background?: keyof ThemeMap<T>[string]['color']\n}) {\n  return <GlobalStyle themeMap={themeMap} background={background} />\n}\n\nconst defineColorVariableCSS = (theme: Theme) => {\n  const borders = mapObject(theme.border, (name, { color }) => [\n    // REVIEW: もしtheme.colorにたまたまborder-〇〇で始まる色名がいたら被りうる\n    withPrefixes('border', name),\n    color,\n  ])\n\n  const colors = defineThemeVariables({ ...theme.color, ...borders })({ theme })\n\n  return toCSSVariables(colors)\n}\n\nfunction toCSSVariables(css: Record<string, string | number>) {\n  return Object.entries(css)\n    .map(([varName, value]) => variableDefinition(varName, value.toString()))\n    .join(';')\n}\n\nconst variableDefinition = (prop: string, value: string) => `${prop}: ${value}`\n","import { css } from 'styled-components'\n\nconst boldCss = css`\n  font-weight: bold;\n`\n\nexport const removeHalfLeadingCss = css`\n  &::before {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-top: -4px;\n  }\n\n  &::after {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-bottom: -4px;\n  }\n`\n\nexport function typography(\n  size: 12 | 14 | 16 | 20,\n  bold = false,\n  preserveHalfLeading = false\n) {\n  const cssObj = css`\n    font-size: ${size}px;\n    line-height: ${size + 8}px;\n    display: flow-root;\n    ${bold === true && boldCss}\n    ${preserveHalfLeading !== true && removeHalfLeadingCss}\n  `\n\n  return cssObj\n}\n","import { css } from 'styled-components'\n\n/**\n * `&:focus:not(:focus-visible)` is backwards compatibility for legacy browsers.\n *\n * cf. https://github.com/WICG/focus-visible#backwards-compatibility\n */\nexport const focusVisibleFocusRingCss = css`\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 4px rgba(0, 150, 250, 0.32);\n  }\n  &:focus:not(:focus-visible) {\n    box-shadow: none;\n  }\n  &:focus-visible {\n    box-shadow: 0 0 0 4px rgba(0, 150, 250, 0.32);\n  }\n`\n","import { css } from 'styled-components'\n\nexport const disabledCss = css`\n  &:disabled,\n  &[aria-disabled]:not([aria-disabled='false']) {\n    opacity: 0.32;\n    cursor: default;\n  }\n`\n","import { css } from 'styled-components'\n\nexport const assertiveRingCss = css`\n  box-shadow: 0 0 0 4px rgba(255, 43, 0, 0.32);\n`\n"],"names":[],"sourceRoot":""}