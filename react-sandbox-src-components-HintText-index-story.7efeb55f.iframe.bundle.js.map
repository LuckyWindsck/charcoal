{"version":3,"file":"react-sandbox-src-components-HintText-index-story.7efeb55f.iframe.bundle.js","mappings":";AAqpBA;AAEA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;AACA;AACA;;AAEA;;;AAWA;;AA4IA;;;;;;;;;;;;;;;;AAkEA;;;;;;;;;;;AAeA;;;;;;AAUA;;AAoHA;;ACj+BA;AAEA;AACA;;;;AAUA;AC7BA;;ACbA;AAeA;;AAQA;AACA;;;;;AASA;;;AAOA;;;AAGA;;;AAKA;AACA;;;;AAUA","sources":["webpack://charcoal-ui/./node_modules/.pnpm/@charcoal-ui+styled@4.2.1_react@18.3.1_styled-components@5.3.11_@babel+core@7.26.8_reac_fc4b25586dda67d14437fc98aefc0a14/node_modules/@charcoal-ui/styled/dist/index.esm.js","webpack://charcoal-ui/./packages/react-sandbox/src/components/icons/Base.tsx","webpack://charcoal-ui/./packages/react-sandbox/src/components/icons/InfoIcon.tsx","webpack://charcoal-ui/./packages/react-sandbox/src/components/HintText/index.tsx"],"sourcesContent":["// src/util.ts\nimport {\n  applyEffect,\n  customPropertyToken,\n  disabledSelector,\n  filterObject,\n  flatMapObject,\n  notDisabledSelector\n} from \"@charcoal-ui/utils\";\nfunction unreachable(value) {\n  throw new Error(\n    arguments.length === 0 ? \"unreachable\" : `unreachable (${JSON.stringify(value)})`\n  );\n}\nvar isPresent = (value) => value != null;\nfunction objectAssign(...sources) {\n  return Object.assign({}, ...sources);\n}\nfunction keyof(obj) {\n  return Object.keys(obj);\n}\nfunction wrapArray(value) {\n  return Array.isArray(value) ? value : [value];\n}\nvar noThemeProvider = new Error(\n  \"`theme` is invalid. `<ThemeProvider>` is not likely mounted.\"\n);\nfunction defineThemeVariables(colorParams, effectParams) {\n  return function toCssObject(props) {\n    if (!isPresent(props.theme)) {\n      throw noThemeProvider;\n    }\n    const colors2 = filterObject(colorParams, isPresent);\n    const effects = Object.entries({\n      ...props.theme.effect,\n      ...effectParams\n    });\n    return flatMapObject(colors2, (colorKey, color) => [\n      [customPropertyToken(colorKey), color],\n      ...effects.map(([effectKey, effect]) => [\n        customPropertyToken(colorKey, [effectKey]),\n        applyEffect(color, [effect])\n      ])\n    ]);\n  };\n}\nfunction isSupportedEffect(effect) {\n  return [\"hover\", \"press\", \"disabled\"].includes(effect);\n}\nvar variable = (value) => `var(${value})`;\nfunction onEffectPseudo(effect, css9) {\n  return effect === \"hover\" ? { \"&:hover\": { [notDisabledSelector]: css9 } } : effect === \"press\" ? { \"&:active\": { [notDisabledSelector]: css9 } } : effect === \"disabled\" ? { [disabledSelector]: css9 } : unreachable(effect);\n}\nfunction withPrefixes(...parts) {\n  return parts.join(\"-\");\n}\n\n// src/internals/index.ts\nvar internalSym = Symbol(\"internal\");\nfunction createInternal({\n  toCSS,\n  context = {}\n}) {\n  return {\n    [internalSym]: {\n      toCSS,\n      context\n    }\n  };\n}\nfunction __DO_NOT_USE_ACCESS_PRIVATE_PROPERTY__(internal) {\n  return internal[internalSym];\n}\nvar shouldCancelHalfLeading = ({\n  cancelHalfLeadingPx,\n  hasVerticalPadding = false\n}) => cancelHalfLeadingPx !== void 0 && !hasVerticalPadding;\nfunction getContext(internals) {\n  return internals.reduce(\n    (context, internal) => ({\n      ...context,\n      ...__DO_NOT_USE_ACCESS_PRIVATE_PROPERTY__(internal).context\n    }),\n    {}\n  );\n}\nfunction toCSSObjects(internals) {\n  const context = getContext(internals);\n  return internals.map(\n    (v) => __DO_NOT_USE_ACCESS_PRIVATE_PROPERTY__(v).toCSS(context)\n  );\n}\n\n// src/factories/lib.ts\nvar defineProperties = (source, member, chain) => Object.defineProperties(\n  source,\n  Object.fromEntries(\n    member.map((key) => [\n      key,\n      { get: () => chain(key), enumerable: true, configurable: true }\n    ])\n  )\n);\nvar defineMethods = (source, member, chain) => Object.defineProperties(\n  source,\n  Object.fromEntries(\n    member.map((key) => [\n      key,\n      {\n        value: (...args) => chain(key, ...args),\n        enumerable: true,\n        configurable: true\n      }\n    ])\n  )\n);\nvar defineConstantProperties = (source, def) => defineProperties(source, Object.keys(def), (key) => def[key]);\nvar definePropertyChains = (modifiers, source) => function definePropertiesRecursively(applied) {\n  const notApplied = modifiers.filter((v) => !applied.includes(v));\n  return defineProperties(\n    source(applied),\n    notApplied,\n    (modifier) => notApplied.length === 0 ? unreachable() : definePropertiesRecursively([...applied, modifier])\n  );\n}([]);\nvar defineMethodChains = (modifiers, source, ..._inferPhantom) => function defineMethodsRecursively(applied) {\n  const notApplied = modifiers.filter(\n    (v) => !applied.map(([w]) => w).includes(v)\n  );\n  return defineMethods(\n    source(applied),\n    notApplied,\n    (modifier, ...args) => notApplied.length === 0 ? unreachable() : defineMethodsRecursively([...applied, [modifier, ...args]])\n  );\n}([]);\n\n// src/builders/border.ts\nimport { customPropertyToken as customPropertyToken2 } from \"@charcoal-ui/utils\";\nvar borderDirections = [\"top\", \"right\", \"bottom\", \"left\"];\nvar createBorderCss = (variant, directions) => {\n  const all = directions.length === 0;\n  const value = `solid 1px ${variable(\n    customPropertyToken2(withPrefixes(\"border\", variant.toString()))\n  )}`;\n  return createInternal({\n    toCSS() {\n      return {\n        ...all ? { border: value } : directions.reduce(\n          (acc, direction) => ({\n            ...acc,\n            [`border-${direction}`]: value\n          }),\n          {}\n        )\n      };\n    }\n  });\n};\nfunction border(theme) {\n  const borderTypes = keyof(theme.border);\n  const borderObject = defineConstantProperties(\n    {},\n    {\n      border: defineProperties(\n        {},\n        borderTypes,\n        (variant) => definePropertyChains(\n          borderDirections,\n          (modifiers) => createBorderCss(variant, modifiers)\n        )\n      )\n    }\n  );\n  return borderObject;\n}\n\n// src/builders/borderRadius.ts\nimport { px } from \"@charcoal-ui/utils\";\nvar createBorderRadiusCss = (theme) => (size2) => {\n  return createInternal({\n    toCSS() {\n      return {\n        borderRadius: px(theme.borderRadius[size2])\n      };\n    }\n  });\n};\nfunction borderRadius(theme) {\n  const borderRadiusCss = createBorderRadiusCss(theme);\n  const borderRadiusObject = defineConstantProperties(\n    {},\n    {\n      borderRadius: (radius) => borderRadiusCss(radius)\n    }\n  );\n  return borderRadiusObject;\n}\n\n// src/builders/colors.ts\nimport {\n  applyEffect as applyEffect2,\n  applyEffectToGradient,\n  customPropertyToken as customPropertyToken3,\n  dur as dur2,\n  gradient\n} from \"@charcoal-ui/utils\";\nimport warning from \"warning\";\n\n// src/builders/transition.ts\nimport { dur } from \"@charcoal-ui/utils\";\nvar TRANSITION_DURATION = 0.2;\nfunction transition(_theme) {\n  const duration = dur(TRANSITION_DURATION);\n  const transition2 = (property) => ({\n    transition: property.map((v) => `${duration} ${v}`).join(\", \")\n  });\n  function toCSS({\n    colorTransition = false,\n    backgroundColorTransition = false,\n    boxShadowTransition = false\n  }) {\n    return transition2(\n      [\n        colorTransition ? \"color\" : null,\n        backgroundColorTransition ? \"background-color\" : null,\n        boxShadowTransition ? \"box-shadow\" : null\n      ].filter(isPresent)\n    );\n  }\n  return createInternal({ toCSS });\n}\n\n// src/builders/colors.ts\nfunction targetProperty(target) {\n  return target === \"bg\" ? \"background-color\" : \"color\";\n}\nvar createColorCss = (_theme) => (target, color, effects = []) => {\n  function toCSS() {\n    return {\n      [targetProperty(target)]: variable(\n        customPropertyToken3(color.toString())\n      ),\n      ...effects.filter(isSupportedEffect).reduce(\n        (acc, effect) => ({\n          ...acc,\n          ...onEffectPseudo(effect, {\n            [targetProperty(target)]: variable(\n              customPropertyToken3(color.toString(), [effect])\n            )\n          })\n        }),\n        {}\n      )\n    };\n  }\n  return createInternal({\n    toCSS,\n    context: effects.length > 0 ? target === \"font\" ? {\n      colorTransition: true\n    } : {\n      backgroundColorTransition: true\n    } : {}\n  });\n};\nvar createGradientColorCss = (theme) => (color, effects = [], direction) => {\n  const toLinearGradient = gradient(direction);\n  function toCSS(context) {\n    const optimized = !shouldCancelHalfLeading(context);\n    const duration = dur2(TRANSITION_DURATION);\n    if (optimized && effects.length > 0) {\n      return {\n        position: \"relative\",\n        zIndex: 0,\n        overflow: \"hidden\",\n        ...effects.filter(isSupportedEffect).reduce(\n          (acc, effect) => ({\n            ...acc,\n            \"&::before\": {\n              zIndex: -1,\n              ...overlayElement,\n              transition: `${duration} background-color`\n            },\n            \"&::after\": {\n              zIndex: -2,\n              ...overlayElement,\n              ...toLinearGradient(theme.gradientColor[color])\n            },\n            ...onEffectPseudo(effect, {\n              \"&::before\": {\n                backgroundColor: applyEffect2(\n                  null,\n                  theme.effect[effect] ?? []\n                )\n              }\n            })\n          }),\n          {}\n        )\n      };\n    }\n    warning(\n      effects.length === 0,\n      `'Transition' will not be applied. You can get around this by specifying 'preserveHalfLeading' or both 'padding' and 'typography'.`\n    );\n    return {\n      ...toLinearGradient(theme.gradientColor[color]),\n      ...effects.filter(isSupportedEffect).reduce(\n        (acc, effect) => ({\n          ...acc,\n          ...onEffectPseudo(effect, {\n            ...toLinearGradient(\n              applyEffectToGradient(theme.effect[effect] ?? [])(\n                theme.gradientColor[color]\n              )\n            )\n          })\n        }),\n        {}\n      )\n    };\n  }\n  return createInternal({ toCSS });\n};\nvar overlayElement = {\n  content: \"''\",\n  display: \"block\",\n  position: \"absolute\",\n  width: \"100%\",\n  height: \"100%\",\n  top: 0,\n  left: 0\n};\nfunction colors(theme) {\n  const colors2 = keyof(theme.color);\n  const effects = keyof(theme.effect);\n  const gradientColors = keyof(theme.gradientColor);\n  const colorCss = createColorCss(theme);\n  const gradientColorCss = createGradientColorCss(theme);\n  const colorObject = defineConstantProperties(\n    {},\n    {\n      bg: objectAssign(\n        defineProperties(\n          {},\n          colors2,\n          (color) => definePropertyChains(\n            effects,\n            (modifiers) => colorCss(\"bg\", color, modifiers)\n          )\n        ),\n        defineProperties(\n          {},\n          gradientColors,\n          (color) => (direction) => definePropertyChains(\n            effects,\n            (modifiers) => gradientColorCss(color, modifiers, direction)\n          )\n        )\n      ),\n      font: defineProperties(\n        {},\n        colors2,\n        (color) => definePropertyChains(\n          effects,\n          (modifiers) => colorCss(\"font\", color, modifiers)\n        )\n      )\n    }\n  );\n  return colorObject;\n}\n\n// src/builders/elementEffect.ts\nvar createElementEffectCss = (theme) => (effects = []) => createInternal({\n  toCSS() {\n    return effects.filter(isSupportedEffect).reduce(\n      (acc, effect) => ({\n        ...acc,\n        ...onEffectPseudo(effect, {\n          opacity: !Array.isArray(\n            theme.elementEffect[effect]\n          ) && theme.elementEffect[effect]?.type === \"opacity\" ? theme.elementEffect[effect]?.opacity : unreachable()\n        })\n      }),\n      {}\n    );\n  }\n});\nfunction elementEffect(theme) {\n  const effectTypes = keyof(\n    theme.elementEffect\n  );\n  const elementEffectCss = createElementEffectCss(theme);\n  const elementEffectObject = definePropertyChains(\n    effectTypes,\n    (modifiers) => elementEffectCss(modifiers)\n  );\n  return elementEffectObject;\n}\n\n// src/builders/outline.ts\nimport { px as px2, notDisabledSelector as notDisabledSelector2 } from \"@charcoal-ui/utils\";\nvar outlineType = [\"focus\"];\nvar outlineCss = (weight, color) => ({\n  boxShadow: `0 0 0 ${px2(weight)} ${color}`\n});\nvar createOutlineColorCss = (theme) => (variant, modifiers) => {\n  const weight = theme.outline[variant].weight;\n  const color = theme.outline[variant].color;\n  return createInternal({\n    toCSS() {\n      return modifiers.includes(\"focus\") ? onFocus(outlineCss(weight, color)) : { \"&&\": { [notDisabledSelector2]: outlineCss(weight, color) } };\n    },\n    context: {\n      boxShadowTransition: true\n    }\n  });\n};\nvar onFocus = (css9) => ({\n  [notDisabledSelector2]: {\n    \"&:focus, &:active\": {\n      outline: \"none\",\n      ...css9\n    },\n    \"&:focus:not(:focus-visible), &:active:not(:focus-visible)\": {\n      outline: \"none\"\n    },\n    \"&:focus-visible\": {\n      outline: \"none\",\n      ...css9\n    }\n  }\n});\nfunction outline(theme) {\n  const outlineCss2 = createOutlineColorCss(theme);\n  const outlineObject = defineConstantProperties(\n    {},\n    {\n      outline: defineProperties(\n        {},\n        keyof(theme.outline),\n        (variant) => definePropertyChains(\n          outlineType,\n          (modifiers) => outlineCss2(variant, modifiers)\n        )\n      )\n    }\n  );\n  return outlineObject;\n}\n\n// src/builders/size.ts\nimport { columnSystem } from \"@charcoal-ui/foundation\";\nimport { px as px3 } from \"@charcoal-ui/utils\";\nvar fixedProperties = [\"width\", \"height\"];\nvar createFixedPxCss = (theme) => (property, size2) => createInternal({\n  toCSS() {\n    return {\n      [property]: size2 === \"auto\" ? \"auto\" : px3(theme.spacing[size2])\n    };\n  }\n});\nvar createFixedRelativeCss = (_theme) => (property, amount) => createInternal({\n  toCSS() {\n    return {\n      [property]: amount\n    };\n  }\n});\nvar createFixedColumnCss = (theme) => (property, span) => createInternal({\n  toCSS() {\n    return {\n      [property]: px3(\n        columnSystem(span, theme.grid.unit.column, theme.grid.unit.gutter)\n      )\n    };\n  }\n});\nfunction size(theme) {\n  const fixedPxCss = createFixedPxCss(theme);\n  const fixedColumnCss = createFixedColumnCss(theme);\n  const fixedRelativeCss = createFixedRelativeCss(theme);\n  const fixedObject = defineProperties(\n    {},\n    fixedProperties,\n    (property) => defineConstantProperties(\n      {},\n      {\n        px: (size2) => fixedPxCss(property, size2),\n        column: (span) => fixedColumnCss(property, span),\n        auto: fixedRelativeCss(property, \"auto\"),\n        full: fixedRelativeCss(property, \"100%\")\n      }\n    )\n  );\n  return fixedObject;\n}\n\n// src/builders/spacing.ts\nimport { px as px4 } from \"@charcoal-ui/utils\";\nvar spacingProperties = [\"margin\", \"padding\"];\nvar spacingDirections = [\n  \"top\",\n  \"right\",\n  \"bottom\",\n  \"left\",\n  \"vertical\",\n  \"horizontal\",\n  \"all\"\n];\nfunction spacingProperty(property, direction) {\n  return `${property}-${direction}`;\n}\nvar createSpacingCss = (theme) => (property, modifiers) => {\n  const { top, right, bottom, left } = modifiers.reduce(\n    (acc, [direction, size2]) => {\n      if (direction === \"all\") {\n        acc.top = size2;\n        acc.right = size2;\n        acc.bottom = size2;\n        acc.left = size2;\n      } else if (direction === \"vertical\") {\n        acc.top = size2;\n        acc.bottom = size2;\n      } else if (direction === \"horizontal\") {\n        acc.right = size2;\n        acc.left = size2;\n      } else {\n        acc[direction] = size2;\n      }\n      return acc;\n    },\n    {}\n  );\n  const hasVerticalPadding = property === \"padding\" && top !== void 0 && bottom !== void 0 && top !== \"auto\" && bottom !== \"auto\";\n  function toCSS({ cancelHalfLeadingPx = 0 }) {\n    return {\n      ...top !== void 0 && {\n        [spacingProperty(property, \"top\")]: top === \"auto\" ? \"auto\" : px4(\n          theme.spacing[top] + (hasVerticalPadding ? cancelHalfLeadingPx : 0)\n        )\n      },\n      ...bottom !== void 0 && {\n        [spacingProperty(property, \"bottom\")]: bottom === \"auto\" ? \"auto\" : px4(\n          theme.spacing[bottom] + (hasVerticalPadding ? cancelHalfLeadingPx : 0)\n        )\n      },\n      ...right !== void 0 && {\n        [spacingProperty(property, \"right\")]: right === \"auto\" ? \"auto\" : px4(theme.spacing[right])\n      },\n      ...left !== void 0 && {\n        [spacingProperty(property, \"left\")]: left === \"auto\" ? \"auto\" : px4(theme.spacing[left])\n      }\n    };\n  }\n  return createInternal({\n    toCSS,\n    context: hasVerticalPadding ? { hasVerticalPadding: true } : {}\n  });\n};\nfunction spacing(theme) {\n  const spacingCss = createSpacingCss(theme);\n  const spacingObject = defineProperties(\n    {},\n    spacingProperties,\n    (spacingProperty2) => defineMethodChains(\n      spacingDirections,\n      (modifiers) => spacingCss(spacingProperty2, modifiers),\n      {}\n    )\n  );\n  return spacingObject;\n}\n\n// src/builders/typography.ts\nimport { halfLeading, px as px5 } from \"@charcoal-ui/utils\";\nvar createTypographyCss = (theme) => (size2, options = {}) => {\n  const {\n    preserveHalfLeading = false,\n    monospace = false,\n    bold = false\n  } = options;\n  const descriptor = theme.typography.size[size2];\n  const margin2 = -halfLeading(descriptor);\n  function toCSS(context) {\n    return {\n      fontSize: px5(descriptor.fontSize),\n      lineHeight: px5(descriptor.lineHeight),\n      ...monospace && {\n        fontFamily: \"monospace\"\n      },\n      ...bold && {\n        fontWeight: \"bold\"\n      },\n      ...shouldCancelHalfLeading(context) && {\n        display: \"flow-root\",\n        \"&::before\": {\n          ...leadingCancel,\n          marginTop: px5(margin2)\n        },\n        \"&::after\": {\n          ...leadingCancel,\n          marginBottom: px5(margin2)\n        }\n      }\n    };\n  }\n  return createInternal({\n    toCSS,\n    context: !preserveHalfLeading ? {\n      cancelHalfLeadingPx: margin2\n    } : {}\n  });\n};\nvar leadingCancel = {\n  display: \"block\",\n  width: 0,\n  height: 0,\n  content: `''`\n};\nvar typographyModifiers = [\n  \"monospace\",\n  \"bold\",\n  \"preserveHalfLeading\"\n];\nfunction typography(theme) {\n  const typographyCss = createTypographyCss(theme);\n  const typographyObject = defineProperties(\n    {},\n    [\"typography\"],\n    (_) => (size2) => definePropertyChains(\n      typographyModifiers,\n      (modifiers) => typographyCss(size2, {\n        preserveHalfLeading: modifiers.includes(\"preserveHalfLeading\"),\n        monospace: modifiers.includes(\"monospace\"),\n        bold: modifiers.includes(\"bold\")\n      })\n    )\n  );\n  return typographyObject;\n}\n\n// src/builders/o.ts\nfunction createO(theme) {\n  return objectAssign(\n    colors(theme),\n    typography(theme),\n    spacing(theme),\n    size(theme),\n    elementEffect(theme),\n    border(theme),\n    borderRadius(theme),\n    outline(theme)\n  );\n}\n\n// src/TokenInjector.tsx\nimport { createGlobalStyle, css } from \"styled-components\";\nimport { mapObject } from \"@charcoal-ui/utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar GlobalStyle = createGlobalStyle`\n  ${({ themeMap, background }) => Object.entries(themeMap).map(\n  ([key, theme]) => key.startsWith(\"@media\") ? css`\n            ${key} {\n              :root {\n                ${background !== void 0 && css`\n                  background-color: ${theme.color[background]};\n                `}\n                ${defineColorVariableCSS(theme)}\n              }\n            }\n          ` : css`\n            /* stylelint-disable-next-line no-duplicate-selectors */\n            ${key} {\n              ${background !== void 0 && css`\n                background-color: ${theme.color[background]};\n              `}\n              ${defineColorVariableCSS(theme)}\n            }\n          `\n)}\n`;\nfunction TokenInjector({\n  theme: themeMap,\n  background\n}) {\n  return /* @__PURE__ */ jsx(GlobalStyle, { themeMap, background });\n}\nvar defineColorVariableCSS = (theme) => {\n  const borders = mapObject(theme.border, (name, { color }) => [\n    withPrefixes(\"border\", name),\n    color\n  ]);\n  const colors2 = defineThemeVariables({ ...theme.color, ...borders })({ theme });\n  return toCSSVariables(colors2);\n};\nfunction toCSSVariables(css9) {\n  return Object.entries(css9).map(([varName, value]) => variableDefinition(varName, value.toString())).join(\";\");\n}\nvar variableDefinition = (prop, value) => `${prop}: ${value}`;\n\n// src/helper.ts\nimport { useEffect, useMemo, useState } from \"react\";\nvar LOCAL_STORAGE_KEY = \"charcoal-theme\";\nvar DEFAULT_ROOT_ATTRIBUTE = \"theme\";\nvar keyStringRegExp = new RegExp(/^(\\w|-)+$/);\nfunction assertKeyString(key) {\n  if (!keyStringRegExp.test(key)) {\n    throw new Error(`Unexpected key :${key}, expect: /^(\\\\w|-)+$/`);\n  }\n}\nvar themeSetter = (attr = DEFAULT_ROOT_ATTRIBUTE) => (theme) => {\n  assertKeyString(attr);\n  if (theme !== void 0) {\n    document.documentElement.dataset[attr] = theme;\n  } else {\n    delete document.documentElement.dataset[attr];\n  }\n};\nfunction themeSelector(theme, attr) {\n  return `:root[data-${attr ?? DEFAULT_ROOT_ATTRIBUTE}='${theme}']`;\n}\nfunction prefersColorScheme(theme) {\n  return `@media (prefers-color-scheme: ${theme})`;\n}\nfunction useThemeSetter({\n  key = LOCAL_STORAGE_KEY,\n  setter = themeSetter()\n} = {}) {\n  const [theme, , system] = useTheme(key);\n  useEffect(() => {\n    if (theme === void 0) {\n      return;\n    }\n    setter(system ? void 0 : theme);\n  }, [setter, system, theme]);\n}\nfunction getThemeSync(key = LOCAL_STORAGE_KEY) {\n  const theme = localStorage.getItem(key);\n  return theme;\n}\nvar useTheme = (localStorageKey = LOCAL_STORAGE_KEY) => {\n  assertKeyString(localStorageKey);\n  const isDark = useMedia(\"(prefers-color-scheme: dark)\");\n  const media = isDark !== void 0 ? isDark ? \"dark\" : \"light\" : void 0;\n  const [local, setTheme, ready] = useLocalStorage(localStorageKey);\n  const theme = !ready || media === void 0 ? void 0 : local ?? media;\n  const system = local === void 0;\n  return [theme, setTheme, system];\n};\nfunction useLocalStorage(key, defaultValue) {\n  const [ready, setReady] = useState(false);\n  const [state, setState] = useState();\n  const defaultValueMemo = useMemo(() => defaultValue?.(), [defaultValue]);\n  useEffect(() => {\n    fetch();\n    window.addEventListener(\"storage\", handleStorage);\n    return () => {\n      window.removeEventListener(\"storage\", handleStorage);\n    };\n  });\n  const handleStorage = (e) => {\n    if (e.storageArea !== localStorage) {\n      return;\n    }\n    if (e.key !== key) {\n      return;\n    }\n    fetch();\n  };\n  const fetch = () => {\n    const raw = localStorage.getItem(key);\n    setState((raw !== null ? deserialize(raw) : null) ?? defaultValueMemo);\n    setReady(true);\n  };\n  const set = (value) => {\n    if (value === void 0) {\n      localStorage.removeItem(key);\n    } else {\n      const raw = serialize(value);\n      localStorage.setItem(key, raw);\n    }\n    const event = new StorageEvent(\"storage\", {\n      bubbles: true,\n      cancelable: false,\n      key,\n      url: location.href,\n      storageArea: localStorage\n    });\n    dispatchEvent(event);\n  };\n  return [state ?? defaultValueMemo, set, ready];\n}\nfunction deserialize(raw) {\n  try {\n    return JSON.parse(raw);\n  } catch {\n    return raw;\n  }\n}\nfunction serialize(value) {\n  if (typeof value === \"string\") {\n    return value;\n  } else {\n    return JSON.stringify(value);\n  }\n}\nfunction useMedia(query) {\n  const [match, setState] = useState();\n  useEffect(() => {\n    const matcher = window.matchMedia(query);\n    const onChange = () => {\n      setState(matcher.matches);\n    };\n    matcher.addEventListener(\"change\", onChange);\n    setState(matcher.matches);\n    return () => {\n      matcher.removeEventListener(\"change\", onChange);\n    };\n  }, [query]);\n  return match;\n}\n\n// src/utils/typographyCss.ts\nimport { css as css2 } from \"styled-components\";\nvar boldCss = css2`\n  font-weight: bold;\n`;\nvar removeHalfLeadingCss = css2`\n  &::before {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-top: -4px;\n  }\n\n  &::after {\n    display: block;\n    width: 0;\n    height: 0;\n    content: '';\n    margin-bottom: -4px;\n  }\n`;\nfunction typography2(size2, bold = false, preserveHalfLeading = false) {\n  const cssObj = css2`\n    font-size: ${size2}px;\n    line-height: ${size2 + 8}px;\n    display: flow-root;\n    ${bold === true && boldCss}\n    ${preserveHalfLeading !== true && removeHalfLeadingCss}\n  `;\n  return cssObj;\n}\n\n// src/SetThemeScript.tsx\nimport { jsx as jsx2 } from \"react/jsx-runtime\";\nfunction makeSetThemeScriptCode({\n  localStorageKey = defaultProps.localStorageKey,\n  rootAttribute = defaultProps.rootAttribute\n} = defaultProps) {\n  assertKeyString(localStorageKey);\n  assertKeyString(rootAttribute);\n  return `'use strict';\n(function () {\n    var localStorageKey = '${localStorageKey}'\n    var rootAttribute = '${rootAttribute}'\n    var currentTheme = localStorage.getItem(localStorageKey);\n    if (currentTheme) {\n        document.documentElement.dataset[rootAttribute] = currentTheme;\n    }\n})();\n`;\n}\nfunction SetThemeScript(props) {\n  const src = makeSetThemeScriptCode(props);\n  return /* @__PURE__ */ jsx2(\n    \"script\",\n    {\n      dangerouslySetInnerHTML: {\n        __html: src\n      }\n    }\n  );\n}\nvar defaultProps = {\n  localStorageKey: LOCAL_STORAGE_KEY,\n  rootAttribute: DEFAULT_ROOT_ATTRIBUTE\n};\nSetThemeScript.defaultProps = defaultProps;\n\n// src/styles/focusVisibleFocusRingCss.ts\nimport { css as css3 } from \"styled-components\";\nvar focusVisibleFocusRingCss = css3`\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 0 4px rgba(0, 150, 250, 0.32);\n  }\n  &:focus:not(:focus-visible) {\n    box-shadow: none;\n  }\n  &:focus-visible {\n    box-shadow: 0 0 0 4px rgba(0, 150, 250, 0.32);\n  }\n`;\n\n// src/styles/disabledCss.ts\nimport { css as css4 } from \"styled-components\";\nvar disabledCss = css4`\n  &:disabled,\n  &[aria-disabled]:not([aria-disabled='false']) {\n    opacity: 0.32;\n    cursor: default;\n  }\n`;\n\n// src/styles/assertiveRingCss.ts\nimport { css as css5 } from \"styled-components\";\nvar assertiveRingCss = css5`\n  box-shadow: 0 0 0 4px rgba(255, 43, 0, 0.32);\n`;\n\n// src/utils/margin.ts\nimport { css as css6 } from \"styled-components\";\n\n// src/utils/helpers/pxIfNum.ts\nfunction pxIfNum(v) {\n  if (v === void 0)\n    return \"\";\n  if (typeof v === \"number\")\n    return `${v}px`;\n  return v;\n}\n\n// src/utils/margin.ts\nfunction margin(arg1, arg2, arg3, arg4) {\n  return css6`\n    margin: ${pxIfNum(arg1)} ${pxIfNum(arg2)} ${pxIfNum(arg3)} ${pxIfNum(arg4)};\n  `;\n}\nfunction marginTop(v) {\n  return css6`\n    margin-top: ${pxIfNum(v)};\n  `;\n}\nfunction marginBottom(v) {\n  return css6`\n    margin-bottom: ${pxIfNum(v)};\n  `;\n}\nfunction marginLeft(v) {\n  return css6`\n    margin-left: ${pxIfNum(v)};\n  `;\n}\nfunction marginRight(v) {\n  return css6`\n    margin-right: ${pxIfNum(v)};\n  `;\n}\n\n// src/utils/padding.ts\nimport { css as css7 } from \"styled-components\";\nfunction padding(arg1, arg2, arg3, arg4) {\n  return css7`\n    padding: ${arg1}px ${pxIfNum(arg2)} ${pxIfNum(arg3)} ${pxIfNum(arg4)};\n  `;\n}\nfunction paddingTop(v) {\n  return css7`\n    padding-top: ${v}px;\n  `;\n}\nfunction paddingBottom(v) {\n  return css7`\n    padding-bottom: ${v}px;\n  `;\n}\nfunction paddingLeft(v) {\n  return css7`\n    padding-left: ${v}px;\n  `;\n}\nfunction paddingRight(v) {\n  return css7`\n    padding-right: ${v}px;\n  `;\n}\n\n// src/utils/gap.ts\nimport { css as css8 } from \"styled-components\";\nfunction gap(v1, v2) {\n  return css8`\n    gap: ${v1}px ${pxIfNum(v2)};\n  `;\n}\nfunction rowGap(v) {\n  return css8`\n    row-gap: ${v}px;\n  `;\n}\nfunction columnGap(v) {\n  return css8`\n    column-gap: ${v}px;\n  `;\n}\n\n// src/utils/addThemeUtils.ts\nfunction addThemeUtils(theme) {\n  return {\n    ...theme,\n    utils: {\n      margin,\n      marginTop,\n      marginLeft,\n      marginBottom,\n      marginRight,\n      padding,\n      paddingTop,\n      paddingLeft,\n      paddingBottom,\n      paddingRight,\n      gap,\n      rowGap,\n      columnGap,\n      typography: typography2,\n      focusVisibleFocusRingCss,\n      assertiveRingCss,\n      disabledCss\n    }\n  };\n}\n\n// src/index.ts\nvar nonBlank = (value) => isPresent(value) && value !== false;\nfunction createTheme(_styled) {\n  return function theme(specFn) {\n    return function interpolate({ theme: theme2 }) {\n      if (!isPresent(theme2)) {\n        throw noThemeProvider;\n      }\n      const internals = [\n        ...wrapArray(\n          specFn(createO(theme2))\n        ),\n        transition(theme2)\n      ].filter(nonBlank);\n      return toCSSObjects(internals);\n    };\n  };\n}\nexport {\n  SetThemeScript,\n  TokenInjector,\n  addThemeUtils,\n  assertiveRingCss,\n  createTheme,\n  defineThemeVariables,\n  disabledCss,\n  focusVisibleFocusRingCss,\n  getThemeSync,\n  makeSetThemeScriptCode,\n  prefersColorScheme,\n  removeHalfLeadingCss,\n  themeSelector,\n  themeSetter,\n  useLocalStorage,\n  useMedia,\n  useTheme,\n  useThemeSetter\n};\n//# sourceMappingURL=index.esm.js.map","import * as React from 'react'\nimport styled from 'styled-components'\n\nexport type IconSizes = 16 | 24 | 32\n\ninterface Props {\n  path: string | React.ReactNode\n  viewBoxSize: number\n  size?: IconSizes | 40 | 48 | 64 | 72\n  transform?: string\n  currentColor?: boolean\n  fillRule?: 'nonzero' | 'evenodd'\n  clipRule?: 'nonzero' | 'evenodd' | 'inherit'\n}\n\nexport default function IconBase({\n  size = 24,\n  viewBoxSize,\n  currentColor,\n  path,\n  transform,\n  fillRule,\n  clipRule,\n}: Props) {\n  return (\n    <Icon\n      viewBox={`0 0 ${viewBoxSize} ${viewBoxSize}`}\n      size={size}\n      currentColor={currentColor}\n    >\n      <IconBasePath\n        path={path}\n        transform={transform}\n        fillRule={fillRule}\n        clipRule={clipRule}\n      />\n    </Icon>\n  )\n}\n\nconst Icon = styled.svg<{ size: number; currentColor?: boolean }>`\n  stroke: none;\n  fill: ${({ currentColor = false, theme }) =>\n    currentColor ? 'currentColor' : theme.color.text2};\n  width: ${(props) => props.size}px;\n  height: ${(props) => props.size}px;\n  line-height: 0;\n  font-size: 0;\n  vertical-align: middle;\n`\n\ntype IconBasePathProps = Pick<\n  Props,\n  'path' | 'transform' | 'fillRule' | 'clipRule'\n>\nexport const IconBasePath = ({\n  path,\n  transform,\n  fillRule,\n  clipRule,\n}: IconBasePathProps) => {\n  if (typeof path === 'string') {\n    return (\n      <path\n        d={path}\n        transform={transform}\n        fillRule={fillRule}\n        clipRule={clipRule}\n      />\n    )\n  } else {\n    return <>{path}</>\n  }\n}\n","import styled from 'styled-components'\nimport IconBase from './Base'\n\nconst size = 16\n\nexport default function InfoIcon() {\n  const path = (\n    <>\n      <path\n        d=\"M8 16C3.58172 16 0 12.4183 0 8C0 3.58172 3.58172 0 8 0C12.4183\n           0 16 3.58172 16 8C16 12.4183 12.4183 16 8 16Z\"\n      />\n      <Path\n        d=\"M14 8C14 11.3137 11.3137 14 8 14C4.68629 14 2 11.3137 2 8C2 4.68629\n           4.68629 2 8 2C11.3137 2 14 4.68629 14 8ZM8 6.25C8.69036 6.25 9.25 5.69036\n           9.25 5C9.25 4.30964 8.69036 3.75 8 3.75C7.30964 3.75 6.75 4.30964 6.75\n           5C6.75 5.69036 7.30964 6.25 8 6.25ZM7 7.75V11.25C7 11.8023 7.44772 12.25\n           8 12.25C8.55228 12.25 9 11.8023 9 11.25V7.75C9 7.19772 8.55228 6.75 8\n           6.75C7.44772 6.75 7 7.19772 7 7.75Z\"\n      />\n    </>\n  )\n  return <IconBase viewBoxSize={size} size={size} currentColor path={path} />\n}\n\nconst Path = styled.path`\n  fill: ${({ theme }) => theme.color.surface1};\n  fill-rule: evenodd;\n`\n","import * as React from 'react'\nimport styled, { css } from 'styled-components'\nimport { theme } from '../../styled'\nimport InfoIcon from '../icons/InfoIcon'\nimport { maxWidth } from '@charcoal-ui/utils'\n\ntype Context = 'page' | 'section'\ninterface Props {\n  children: React.ReactNode\n  context: Context\n  className?: string\n}\n\nexport default function HintText({ children, context, className }: Props) {\n  return (\n    <Container\n      className={className}\n      {...styledProps({ children, context, className })}\n    >\n      <IconWrap>\n        <InfoIcon />\n      </IconWrap>\n      <Text>{children}</Text>\n    </Container>\n  )\n}\n\nconst Container = styled.div<ReturnType<typeof styledProps>>`\n  ${(p) =>\n    theme((o) => [\n      o.bg.surface3,\n      o.borderRadius(8),\n      o.padding.vertical(p.default.vertical),\n      o.padding.horizontal(p.default.horizontal),\n    ])}\n\n  @media ${({ theme: t }) => maxWidth(t.breakpoint.screen1)} {\n    ${(p) =>\n      theme((o) => [\n        o.padding.vertical(p.screen1.vertical),\n        o.padding.horizontal(p.screen1.horizontal),\n      ])}\n  }\n\n  display: flex;\n  align-items: flex-start;\n  ${(p) =>\n    p.context === 'page' &&\n    css`\n      justify-content: center;\n    `}\n`\n\nconst IconWrap = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${(p) => p.theme.color.text4};\n  height: 22px;\n  margin: -4px 4px -4px 0;\n`\n\nconst Text = styled.p`\n  ${theme((o) => [o.font.text2, o.typography(14)])}\n  margin: 0;\n  min-width: 0;\n  overflow-wrap: break-word;\n`\n\nfunction styledProps(props: Props) {\n  return { ...props, ...contextToProps(props.context) }\n}\n\nfunction contextToProps(context: Context) {\n  switch (context) {\n    case 'page':\n      return {\n        default: {\n          horizontal: 40,\n          vertical: 24,\n        },\n        screen1: {\n          horizontal: 16,\n          vertical: 16,\n        },\n      } as const\n    case 'section':\n      return {\n        default: {\n          horizontal: 16,\n          vertical: 16,\n        },\n        screen1: {\n          horizontal: 16,\n          vertical: 16,\n        },\n      } as const\n  }\n}\n"],"names":[],"sourceRoot":""}